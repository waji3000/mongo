# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionConcatArrays

    let [
        l5.0 = getField(s1, "arr1") 
        l5.1 = getField(s1, "arr2") 
        l5.2 = concatArrays(l5.0, [2.5L, "str"], l5.1) 
    ] 
    in 
        if exists(l5.2) 
        then makeOwn(move(l5.2)) 
        elif ((typeMatch(move(l5.0), 1088) ?: true) || (typeMatch(move(l5.1), 1088) ?: true)) 
        then null 
        else fail(7158000, "$concatArrays only supports arrays") 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSetDifference

    let [
        l8.0 = getField(s1, "arr2") 
        l8.1 = getField(s1, "arr3") 
    ] 
    in 
        if ((typeMatch(l8.0, 1088) ?: true) || (typeMatch(l8.1, 1088) ?: true)) 
        then null 
        elif (!(isArray(l8.0)) || !(isArray(l8.1))) 
        then fail(7158101, "All operands of $setDifference must be arrays.") 
        else setDifference(move(l8.0), move(l8.1)) 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSetEquals

    let [
        l11.0 = getField(s1, "arr2") 
        l11.1 = getField(s1, "arr3") 
    ] 
    in 
        if ((!(isArray(l11.0)) || !(isArray(l11.1))) ?: true) 
        then fail(7158100, "All operands of $setEquals must be arrays.") 
        else setEquals(move(l11.0), move(l11.1)) 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSetIntersection

    let [
        l14.0 = getField(s1, "arr2") 
        l14.1 = getField(s1, "arr3") 
    ] 
    in 
        if ((typeMatch(l14.0, 1088) ?: true) || (typeMatch(l14.1, 1088) ?: true)) 
        then null 
        elif (!(isArray(l14.0)) || !(isArray(l14.1))) 
        then fail(7158101, "All operands of $setIntersection must be arrays.") 
        else setIntersection(move(l14.0), move(l14.1)) 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSetIsSubset

    let [
        l17.0 = getField(s1, "arr2") 
    ] 
    in 
        if (!(isArray(l17.0)) ?: true) 
        then fail(7158100, "All operands of $setIsSubset must be arrays.") 
        else setIsSubset([2.5L, "str"], move(l17.0)) 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSetUnion

    let [
        l20.0 = getField(s1, "arr2") 
        l20.1 = getField(s1, "arr3") 
    ] 
    in 
        if ((typeMatch(l20.0, 1088) ?: true) || (typeMatch(l20.1, 1088) ?: true)) 
        then null 
        elif (!(isArray(l20.0)) || !(isArray(l20.1))) 
        then fail(7158101, "All operands of $setUnion must be arrays.") 
        else setUnion(move(l20.0), move(l20.1)) 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionReverseArray

    let [
        l22.0 = getField(s1, "arr2") 
    ] 
    in 
        if (typeMatch(l22.0, 1088) ?: true) 
        then null 
        elif isArray(l22.0) 
        then reverseArray(move(l22.0)) 
        else fail(7158002, "$reverseArray argument must be an array") 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionSortArray

    let [
        l24.0 = getField(s1, "arr2") 
    ] 
    in 
        if (typeMatch(l24.0, 1088) ?: true) 
        then null 
        elif isArray(l24.0) 
        then sortArray(move(l24.0), {"" : -1L}) 
        else fail(7158001, "$sortArray input argument must be an array") 

# Golden test output of GoldenGenExpressionTest/TestExprArraySet
ExpressionIsArray
(isArray(getField(s1, "arr2")) ?: false) 
