# Copyright (C) 2018-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/session/kill_sessions_util.h"

imports:
    - "mongo/crypto/sha256_block.idl"
    - "mongo/db/session/logical_session_id.idl"
    - "mongo/db/basic_types.idl"

server_parameters:
    KillSessionsMaxConcurrency:
        description: >-
            The maximum number of hosts to for killSessionsRemote to kill sessions on at the same time.
        set_at: startup
        cpp_vartype: int
        cpp_varname: gKillSessionsMaxConcurrency
        default: 100
        redact: false

    KillSessionsPerHostTimeoutMS:
        description: >-
            The maximum number of miliseconds for killSessionsRemote to wait for host to respond.
        set_at: startup
        cpp_vartype: int
        cpp_varname: gKillSessionsPerHostTimeoutMS
        default: 60000
        redact: false
    AbortExpiredTransactionsSessionCheckoutTimeout:
        description: >-
            The maximum number of milliseconds for a session to checkout when aborting expired transactions.
        set_at: [startup, runtime]
        cpp_vartype: AtomicWord<int>
        cpp_varname: gAbortExpiredTransactionsSessionCheckoutTimeout
        default: 100
        redact: false

    AbortOldestTransactionSessionCheckoutTimeoutMilliseconds:
        description: >-
            The maximum number of milliseconds for a session to checkout when aborting oldest transactions.
        set_at: [startup, runtime]
        cpp_vartype: int
        cpp_varname: gAbortOldestTransactionSessionCheckoutTimeoutMilliseconds
        default: 100
        redact: false
    AbortOldestTransactionSessionKillLimitPerBatch:
        description: >-
            The maximum number of sessions that will be killed at a time when aborting oldest transactions.
            A value of zero effectively disables evicting the oldest transaction.
        set_at: [startup, runtime]
        cpp_vartype: int
        cpp_varname: gAbortOldestTransactionSessionKillLimitPerBatch
        default: 1
        validator: {gte: 0}
        redact: false
    AbortOldestTransactionMemoryClearLimitPerBatch:
        description: >-
            The target amount of memory which will be freed at a time when aborting oldest transactions.
             - Positive values are absolute targets, in MB. So "1024" means a gigabyte.
             - Negative values are percentages, relative to the cache size allocated for storage. so "-3"
               means 3% of the cache's configured maximum size.
             - Zero (the default) means that no limit will be applied, i.e. transactions will continue to
               be rolled-back until the system is not under memory pressure or a different limit is reached.
        set_at: [startup, runtime]
        cpp_vartype: double
        cpp_varname: gAbortOldestTransactionMemoryClearLimitPerBatch
        default: 0
        validator: {gte: -100}
        redact: false

structs:
    KillSessionsCmdFromClient:
        description: "A struct representing a killSessions command from a client"
        strict: false
        fields:
            killSessions: array<LogicalSessionFromClient>

    KillAllSessionsUser:
        description: "A struct representing a killAllSessions User"
        strict: true
        fields:
            user: string
            db: string

    KillAllSessionsRole:
        description: "A struct representing a killAllSessions Role"
        strict: true
        fields:
            role: string
            db: string

    KillAllSessionsCmd:
        description: "A struct representing a killAllSessions command"
        strict: false
        fields:
            killAllSessions: array<KillAllSessionsUser>

    KillAllSessionsByPattern:
        description: "A struct representing a killAllSessionsByPatternCmd kill pattern"
        strict: true
        fields:
            lsid:
                type: LogicalSessionId
                optional: true
                validator:
                    callback: "kill_sessions::validateLsid"
            uid:
                type: sha256Block
                optional: true
            users:
                description: "logged in users for impersonate"
                type: array<KillAllSessionsUser>
                optional: true
            roles:
                description: "logged in roles for impersonate"
                type: array<KillAllSessionsRole>
                optional: true

    KillAllSessionsByPatternCmd:
        description: "A struct representing a killAllSessionsByPattern command"
        strict: false
        fields:
            killAllSessionsByPattern: array<KillAllSessionsByPattern>

    KillSessionsCmdToServer:
        description: "A struct representing a killSessions command to a server"
        strict: true
        fields:
            killSessions: array<LogicalSessionId>
